package com.hust.nodecontroller;

import com.alibaba.fastjson.JSONObject;
import com.antherd.smcrypto.sm2.Keypair;
import com.antherd.smcrypto.sm2.Sm2;
import com.hust.nodecontroller.fnlencrypt.SM2EncDecUtils;
import com.hust.nodecontroller.fnlencrypt.SM2SignVerUtils;
import com.hust.nodecontroller.utils.ConvertUtil;
import com.hust.nodecontroller.utils.EncDecUtil;
import org.bouncycastle.crypto.digests.SM3Digest;
import org.junit.jupiter.api.Test;

import java.util.Arrays;

public class EncDecTest {

    final static String prikSM = "6adb8ee2ac02a01353a6ecc03cbf88e1beb6cfa9706f74aa9308ff68229c4d46";
    final static String pubkSM = "04e07cd5ce021076ad687c07314b905deb6f6d32be1d4654be2a2c08a6767bce62c7fed615d5ac993610e2d099eceddf6797fd693cd2b244148f33eca6dfb9edbd";
    final static JSONObject json = new JSONObject();
    final static byte[] sourceData ="".getBytes();
    static {
        json.put("status", 0);
        json.put("message", "086.001.000001/02.03.11.20210407.021010");
        String jsonString = json.toString();
    }

    @Test
    public void signTest() throws Exception {
        //签名测试
        String sign = SM2SignVerUtils.Sign2SM2(ConvertUtil.hexStringToBytes(prikSM), sourceData, "zhangbowen");
        boolean verify = SM2SignVerUtils.VerifySignSM2(ConvertUtil.hexStringToBytes(pubkSM), sourceData, ConvertUtil.hexStringToBytes(sign), "zhangbowen");
        System.out.println(verify);
    }

    @Test
    public void encryptTest() throws Exception {
        //加解密测试
        String str = "086.001.000001/02.03.09.20210407.910006";
        String encrypt0 = EncDecUtil.sMEncrypt(str);
        String encrypt = SM2EncDecUtils.encrypt(ConvertUtil.hexToByte(pubkSM), str.getBytes());
        System.out.println(encrypt);
        String decrypt = null;
        try {
            decrypt = new String(SM2EncDecUtils.decrypt(ConvertUtil.hexToByte(prikSM), ConvertUtil.hexToByte(encrypt0)));
        } catch (Exception e) {
            System.out.println("验证失败");
        }
        System.out.println(decrypt);
    }

    @Test
    public void hashTest() throws Exception {
        String url = "hust/ncc/zbw";
        SM3Digest sm3Digest = new SM3Digest();
        sm3Digest.update(url.getBytes(), 0, url.getBytes().length);
        byte [] md = new byte[32];
        sm3Digest.doFinal(md, 0);
        String hashUrl = ConvertUtil.getHexString(md);
        System.out.println(hashUrl);

    }


    @Test
    public void generateKey() throws Exception {
        Keypair keypair = Sm2.generateKeyPairHex();
        String privateKey = keypair.getPrivateKey();
        String publicKey = keypair.getPublicKey();
        System.out.println(privateKey);
        System.out.println(publicKey);
    }

    @Test
    public void sm2EncDec() throws Exception {
        String str = "982593e7181e5ddad7d78ddbfb0b73b6fb0eb9d1d6e5222a4901993634d6d648411cd40ea90e77b38fbd98638c310da5b519e2ef8c790e5681d3749a534b40b11f8f92bd56557b6d2fac713de30869990eca43895c6cbdaee0ff739df96d0a179a3e2adc49bc547495519ef63bd0343731b6d40b4a8b7b3fa83cd1eb85fe325f1cd8f9ebe70f889daf4479834e889cf2b79abb5f35744c64d38f98cacdddd51ddc36f95249de3d619e3012538d613b807d88052dfe3d351fe1287a4f2c6411caa493991a793f694f3401def9413fdbc2c8b9fc9c40925494cab221126657addeb7b9d831fdc21c83868117cd7096e7b0a59d622fb4b18aae36accffe391fb62f3d0d0538331f1ad9ab865f5203dbdd913b2f38b25f1981a4ac25410b19233625e0ee3b1f960c016b41f3795ec45858c419d359562e44f27e9b41dfc1b68de5da10d7b92fd491907091de41d599459ffd102960c7515217e2f534f9ba2f32b0e378b65c9f72f3b0db4bd64e3dd528768238a6e3a5c9657ce26ba145bbb6e9c9e5591595a112bc1422acd7c3918ebc3fff178d0a1efded4536fee227a99a3f71f0182ab989ff9ace641dfe5e4f2502a3ca2493ab989423c46437a9c1299be4a2abc3da34807b4aa428fe2fd22cbbbf47d3dd2d7e88b8bb88359e10e2a31fc19c76964141e136576c65112b620bc595f0884c67c09189efc8734d27eaf01969544f6b33bcd49f8824919692a067c8e069d5595af2337c590991e30d63452eaf69514eb5baa1df64a0a14effe37300c4b4791e08cd5597ed8fcb62cc4de731ebb89ce9c9fda1e621c1025a06ef9ccdaf75c58c444e129465626b33ebab9085e39c1e93b60d172c5d4fbe08cb7ece68a6993c1ad50ecc514f83b1bbf509cd80c83dd79dc8b440ed4e2eadff163886118af6a9e7712bbdd9126f9df46911a82783f9ede154cb2b12f870421193e17023420303820efd3a616b1db91e90a0ff9f7024d37d75b745279fa02c88febd7276111e531a296f50a55cb522c56715c8857a9cde5866f9d80fdc9e825fc97a81aab30e56279e548d5c33d8f5a1815dcb7ae482a77b109c1ea51fd0d4e91c2286bbe51e2de1b4341af0b12780663d993685ad19b7336ec06e5d56267361ed16e06724a3d976d6c4812f670e2d4de5f2be783e7e921210fa8917c17dc19b0bced8cd53b99c1b7709d16a7312dff6e64eac101241c66b99589d64d8c76176e8b8e5041c9f4b0edfc0ba38a8bc060fa25f5f23c2c5dda18d831b70f9af3d86e87cf4bfadc452b2a31bf97645b49070a4c5e4b2d336aab56d2315e6554d7954610a19801e10b7ad355d6d6b3328fed15ff80861250b25c95b2903247bb905be70eda4f91db717510e9b59028d1dd4569b40961673e7ff6113c02d1ae6c64d1db61a84255a65801f028183374148ae57f5abc9984450ad3b848821aadd48e3fbca29d4012351dfb0c1aefe7170472853c1953ad1f1e72fb09e4fb0debb117a4f18420fc331725aaa5ff57adcd7c541ea7bb568bf427b4eb30d2cef4d5bf06d1ddb035601e154e7f366950f07ef452d53090710b89c35ad8571831077746e02fca11abc39edc61906e3492e3f18f280c29d2a3e0d3b8798b69acfdff768b01896fc1beb3be3ae0c8b734336bfc6b8b0422b2c7ba79ae7669ede2d81a27d6e7d1719f8af7973a24f2b1e0e56d9a167723dff25059c319fa94a1bc58802666d82eaf17ac73fb0512276abc6231980df2f9e6aee293ac57acf4a220a05d65cc08f13b8a4ad1c548ee125ba886eb29fcae23d5f5dcde4f575c55eb6c6e793c89d8ef8ae4d71e7e22ca615cb47568e9d7fb3c794bbfc152b31f82170d50ed79534cd8388a52c2363ae74e0d24a5a362c82b91fb5cd39f3e6231278e5cea1590b0c54fb5e23af0b817400f4bee088578a6a779b815493f30c943e7efab6be90043bd8aaeb85c45110ba2849e50496338332df5fbf10c5d07c8f0b1265bf236ace13798c9d1e87e99efc6815f12824e5d6dfd6f2db429a031f29f0ebc6c50f04676cf508aa44d83fc13ab8ada058cc95511cb0ecd5ae1c2be778e8e200b2528b01bc295be315d8b64e856bbcb9869d33b2c3aaed5f29c2853a467e2c0e10b72007dc6edd6db6489d4758097a007e8d8a15dc46a45350891841fb58551aef6f8e0f580f477b070df8ffc4dd2ce2212b732ba11ccb80a0c8c416cbae16690cbf57ed307990150525b223fcdc4eaf990df4f56e0001ca43a59c940e5332a4d785dbf6e546cf6d25d983e2ba06b05c3c28d16641227e0be03f1ec89c9c7915e5f21fdc3424f8d9e11a450ade405458ea10a33c15b3caa9709bfd90d1b16a9c51ac9c8c9a37a37f27b90c933fc3f4b1fa1582eb5fd20eee795c017036e06c43b708a1f5ffcfb6aa2e6aff2f14c8f9d41e10bccfbb4ce26dce0064c763b1004da229303b677d11acda7ee125707b00df6dbc028770e74bef74538620f73ad2fea73fd9a2a72f83b8f9149dce5112643d1a286fdee7d856f408033d48bbb1fed3a5b649b6305f5f99e2411a760b814b797c90850d7045a0d4d755f45830ba0797bb0c7a59fded624741ca05beb3a945f0ff377b08c9475a8b7851a3ef0de3118e740dc6e04c6340756a87cf2b4c6551a577b3404c5defcda8b03cee80891788b9935d15850b4b20d5ae4fa58626ab334155b63a35fd314866eaa884617c13cd02cef536398650b69b440f295621ec122f7508cfa0505ecc504b3eb57a34313ef669b0d02ba2d29e90b1f6b051558758bea2862acee6b583461499db6260829c7f5e995957e94aeab27b4cc0182e1a669408efa735c4fe4703f1049c5da0ae4ec0f57bdbef10ce458308c920a79e35d342c56c2aa11e880b0764b6b519ae65060d10765c1809ca076360b10ddfefc9f16bbb25a4dec74a89c98d50c404ef85fa1c5c08802a542f18f3ba1d0fff7fbee9eed1c8311467a58283e78b7a253de3614c062ea56f1e1aea0e53a6f13bf7aefa82958e00772528fd15ccb051e43b996908342b9fa531f97aac8881f01aac607b48c9390e87dc483e1f3c4bb3bcf5d2cb7564a580b7b8f2c6bdc9daca7c8490a1a311dd9a389abee2925efba07432197abf4910dd9db0f09a1afb0ff254f70c91fc9f4dde1baf56d178152a79fa1cd70aed3bdb3e547b8832ff5f3a99bf79272d6848abb6960a784eaf79179a1b119868e9475d99a51b6b2590e2d023c6207a2fc80154334312708579bfed821c91ba4e04271cd56aac18df15872e883a21675c116ab12cbcac8a411f198a5ad6749dd3f0e95bd1478d3ac34167f8150344291a1c33e60700c2b9040583346765764c12ef6e51faa930c8b3a3f4d1fb7dd65359b2fe571ada5695e0e5c78747b6c1e38d46a938298dbbb6da0bceab22c78ba080cef8f44892d2e5a2fd24ffe334b3f128ebd45061e95924da6cb641234d79d63bc4c563bd66897aefc0b56007c4bf8e66d2cb2d140365a0941302154f8a409e858854255fec2d819ca85564df611ae80c7aacb5c5452692b60f4d8c237f0aeea53405156037607bb5b7981b5688d528dcf53751511eef3c2ad0545693560327cc6565ded78afaedbb0af89aefc2466fc8f9654b1207d01b5ffcb5be81f8be34e3362f97c49e83af8713929607a81825ab7aa584ab0682f53f9cc733544ea1365e2088771c33e105c4d65c6039b0f0e160f31e97290f9282f414cf2cb1f6d203c1f4d9c53981cf269a14fe4e51ed3f506af0cbc8b23579a0911a7d7de847d634f79bcc2e4a212cca20c2b50b6c5457c4574a9c1fc5ff8ac4800ff4a383bc6b5351c334efbaf06c62d1f45d8349d1f432cc7d21e917602f8aefba0db05dc7a687ff9218a556d0629e5e018a65fa025796b622d7f458f20307cbbaf0b27ed49c3bb94baedbf0a4cc8f58cd52b36326827f030beeeecfb858247dfdacf6b33add617a242902000935a926721f062b574166ecdfcf5a55b320b67971c7d032e17fdbf1bfbdf883b0d4f81eed241b36556ea404b2bd3f32a994a2bc646359480d4134372af492fbc6ab6d99a98296451f49c2b5385903a67b2dbd52a7cfc004a6611c765888974fc30ceb52710311279768aa7b9611e784fe21d3ebc3d7f45871719c6872d2a5026858e1fd43d31fbe915c4caafcd9b96c12111cfef5f1462bdd9b674245f343ac1918ef0a83ef9ccaa7517157fd5496ddb20ebb9b20d72d79b21d3493cfd2b1d92fdf97c81365611b37e6f4d3821bd22f9f43a5d161c7279511f91a576ee0de60c220519e250f9a87bacb6059d4994cb86c7a7d96346ca05bfa26eb780b3839a8ddcc00ff1ed9e45f0b390a41fdb2f812990c5c043f7927b10730cd3e8a";
        String decryptData = EncDecUtil.sMDecrypt(str);
        JSONObject jsonObject = JSONObject.parseObject(decryptData);
        System.out.println(decryptData);
    }
}
